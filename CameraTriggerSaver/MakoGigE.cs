/*=============================================================================
This file was generated by the VimbaClassGenerator
=============================================================================*/

namespace CameraTriggerSaver
{
    public class MakoGigE : AVT.VmbAPINET.Camera
    {
        #region Constructors.

        public MakoGigE (
            string cameraID,
            string cameraName,
            string cameraModel,
            string cameraSerialNumber,
            string interfaceID,
            AVT.VmbAPINET.VmbInterfaceType interfaceType,
            string interfaceName,
            string interfaceSerialNumber,
            AVT.VmbAPINET.VmbAccessModeType interfacePermittedAccess)
            : base (
                cameraID,
                cameraName,
                cameraModel,
                cameraSerialNumber,
                interfaceID,
                interfaceType,
                interfaceName,
                interfaceSerialNumber,
                interfacePermittedAccess)
        {
        }

        #endregion

        #region Public properties.

        #region Category /Acquisition

        public long AcquisitionFrameCount
        {
            get { return AcquisitionFrameCountFeature.IntValue; }
            set { AcquisitionFrameCountFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature AcquisitionFrameCountFeature
        {
            get
            {
                if (m_AcquisitionFrameCountFeature == null)
                    m_AcquisitionFrameCountFeature = Features ["AcquisitionFrameCount"];
                return m_AcquisitionFrameCountFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionFrameCountFeature = null;

        public double AcquisitionFrameRateAbs
        {
            get { return AcquisitionFrameRateAbsFeature.FloatValue; }
            set { AcquisitionFrameRateAbsFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature AcquisitionFrameRateAbsFeature
        {
            get
            {
                if (m_AcquisitionFrameRateAbsFeature == null)
                    m_AcquisitionFrameRateAbsFeature = Features ["AcquisitionFrameRateAbs"];
                return m_AcquisitionFrameRateAbsFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionFrameRateAbsFeature = null;

        public double AcquisitionFrameRateLimit
        {
            get { return AcquisitionFrameRateLimitFeature.FloatValue; }
        }
        public AVT.VmbAPINET.Feature AcquisitionFrameRateLimitFeature
        {
            get
            {
                if (m_AcquisitionFrameRateLimitFeature == null)
                    m_AcquisitionFrameRateLimitFeature = Features ["AcquisitionFrameRateLimit"];
                return m_AcquisitionFrameRateLimitFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionFrameRateLimitFeature = null;

        public AcquisitionModeEnum AcquisitionMode
        {
            get { return (AcquisitionModeEnum) AcquisitionModeFeature.EnumIntValue; }
            set { AcquisitionModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature AcquisitionModeFeature
        {
            get
            {
                if (m_AcquisitionModeFeature == null)
                    m_AcquisitionModeFeature = Features ["AcquisitionMode"];
                return m_AcquisitionModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionModeFeature = null;

        public long RecorderPreEventCount
        {
            get { return RecorderPreEventCountFeature.IntValue; }
            set { RecorderPreEventCountFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature RecorderPreEventCountFeature
        {
            get
            {
                if (m_RecorderPreEventCountFeature == null)
                    m_RecorderPreEventCountFeature = Features ["RecorderPreEventCount"];
                return m_RecorderPreEventCountFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_RecorderPreEventCountFeature = null;

        #endregion

        #region Category /Acquisition/Trigger

        public TriggerActivationEnum TriggerActivation
        {
            get { return (TriggerActivationEnum) TriggerActivationFeature.EnumIntValue; }
            set { TriggerActivationFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature TriggerActivationFeature
        {
            get
            {
                if (m_TriggerActivationFeature == null)
                    m_TriggerActivationFeature = Features ["TriggerActivation"];
                return m_TriggerActivationFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerActivationFeature = null;

        public double TriggerDelayAbs
        {
            get { return TriggerDelayAbsFeature.FloatValue; }
            set { TriggerDelayAbsFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature TriggerDelayAbsFeature
        {
            get
            {
                if (m_TriggerDelayAbsFeature == null)
                    m_TriggerDelayAbsFeature = Features ["TriggerDelayAbs"];
                return m_TriggerDelayAbsFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerDelayAbsFeature = null;

        public TriggerModeEnum TriggerMode
        {
            get { return (TriggerModeEnum) TriggerModeFeature.EnumIntValue; }
            set { TriggerModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature TriggerModeFeature
        {
            get
            {
                if (m_TriggerModeFeature == null)
                    m_TriggerModeFeature = Features ["TriggerMode"];
                return m_TriggerModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerModeFeature = null;

        public TriggerOverlapEnum TriggerOverlap
        {
            get { return (TriggerOverlapEnum) TriggerOverlapFeature.EnumIntValue; }
            set { TriggerOverlapFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature TriggerOverlapFeature
        {
            get
            {
                if (m_TriggerOverlapFeature == null)
                    m_TriggerOverlapFeature = Features ["TriggerOverlap"];
                return m_TriggerOverlapFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerOverlapFeature = null;

        public TriggerSelectorEnum TriggerSelector
        {
            get { return (TriggerSelectorEnum) TriggerSelectorFeature.EnumIntValue; }
            set { TriggerSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature TriggerSelectorFeature
        {
            get
            {
                if (m_TriggerSelectorFeature == null)
                    m_TriggerSelectorFeature = Features ["TriggerSelector"];
                return m_TriggerSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerSelectorFeature = null;

        public TriggerSourceEnum TriggerSource
        {
            get { return (TriggerSourceEnum) TriggerSourceFeature.EnumIntValue; }
            set { TriggerSourceFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature TriggerSourceFeature
        {
            get
            {
                if (m_TriggerSourceFeature == null)
                    m_TriggerSourceFeature = Features ["TriggerSource"];
                return m_TriggerSourceFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerSourceFeature = null;

        #endregion

        #region Category /BufferHandlingControl

        public long StreamAnnounceBufferMinimum
        {
            get { return StreamAnnounceBufferMinimumFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StreamAnnounceBufferMinimumFeature
        {
            get
            {
                if (m_StreamAnnounceBufferMinimumFeature == null)
                    m_StreamAnnounceBufferMinimumFeature = Features ["StreamAnnounceBufferMinimum"];
                return m_StreamAnnounceBufferMinimumFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamAnnounceBufferMinimumFeature = null;

        public long StreamAnnouncedBufferCount
        {
            get { return StreamAnnouncedBufferCountFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StreamAnnouncedBufferCountFeature
        {
            get
            {
                if (m_StreamAnnouncedBufferCountFeature == null)
                    m_StreamAnnouncedBufferCountFeature = Features ["StreamAnnouncedBufferCount"];
                return m_StreamAnnouncedBufferCountFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamAnnouncedBufferCountFeature = null;

        public StreamBufferHandlingModeEnum StreamBufferHandlingMode
        {
            get { return (StreamBufferHandlingModeEnum) StreamBufferHandlingModeFeature.EnumIntValue; }
            set { StreamBufferHandlingModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature StreamBufferHandlingModeFeature
        {
            get
            {
                if (m_StreamBufferHandlingModeFeature == null)
                    m_StreamBufferHandlingModeFeature = Features ["StreamBufferHandlingMode"];
                return m_StreamBufferHandlingModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamBufferHandlingModeFeature = null;

        #endregion

        #region Category /Controls

        public double Gamma
        {
            get { return GammaFeature.FloatValue; }
            set { GammaFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature GammaFeature
        {
            get
            {
                if (m_GammaFeature == null)
                    m_GammaFeature = Features ["Gamma"];
                return m_GammaFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GammaFeature = null;

        #endregion

        #region Category /Controls/BlackLevelControl

        public double BlackLevel
        {
            get { return BlackLevelFeature.FloatValue; }
            set { BlackLevelFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature BlackLevelFeature
        {
            get
            {
                if (m_BlackLevelFeature == null)
                    m_BlackLevelFeature = Features ["BlackLevel"];
                return m_BlackLevelFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_BlackLevelFeature = null;

        public BlackLevelSelectorEnum BlackLevelSelector
        {
            get { return (BlackLevelSelectorEnum) BlackLevelSelectorFeature.EnumIntValue; }
            set { BlackLevelSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature BlackLevelSelectorFeature
        {
            get
            {
                if (m_BlackLevelSelectorFeature == null)
                    m_BlackLevelSelectorFeature = Features ["BlackLevelSelector"];
                return m_BlackLevelSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_BlackLevelSelectorFeature = null;

        #endregion

        #region Category /Controls/DSPSubregion

        public long DSPSubregionBottom
        {
            get { return DSPSubregionBottomFeature.IntValue; }
            set { DSPSubregionBottomFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature DSPSubregionBottomFeature
        {
            get
            {
                if (m_DSPSubregionBottomFeature == null)
                    m_DSPSubregionBottomFeature = Features ["DSPSubregionBottom"];
                return m_DSPSubregionBottomFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DSPSubregionBottomFeature = null;

        public long DSPSubregionLeft
        {
            get { return DSPSubregionLeftFeature.IntValue; }
            set { DSPSubregionLeftFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature DSPSubregionLeftFeature
        {
            get
            {
                if (m_DSPSubregionLeftFeature == null)
                    m_DSPSubregionLeftFeature = Features ["DSPSubregionLeft"];
                return m_DSPSubregionLeftFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DSPSubregionLeftFeature = null;

        public long DSPSubregionRight
        {
            get { return DSPSubregionRightFeature.IntValue; }
            set { DSPSubregionRightFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature DSPSubregionRightFeature
        {
            get
            {
                if (m_DSPSubregionRightFeature == null)
                    m_DSPSubregionRightFeature = Features ["DSPSubregionRight"];
                return m_DSPSubregionRightFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DSPSubregionRightFeature = null;

        public long DSPSubregionTop
        {
            get { return DSPSubregionTopFeature.IntValue; }
            set { DSPSubregionTopFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature DSPSubregionTopFeature
        {
            get
            {
                if (m_DSPSubregionTopFeature == null)
                    m_DSPSubregionTopFeature = Features ["DSPSubregionTop"];
                return m_DSPSubregionTopFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DSPSubregionTopFeature = null;

        #endregion

        #region Category /Controls/Exposure

        public ExposureAutoEnum ExposureAuto
        {
            get { return (ExposureAutoEnum) ExposureAutoFeature.EnumIntValue; }
            set { ExposureAutoFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature ExposureAutoFeature
        {
            get
            {
                if (m_ExposureAutoFeature == null)
                    m_ExposureAutoFeature = Features ["ExposureAuto"];
                return m_ExposureAutoFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureAutoFeature = null;

        public ExposureModeEnum ExposureMode
        {
            get { return (ExposureModeEnum) ExposureModeFeature.EnumIntValue; }
            set { ExposureModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature ExposureModeFeature
        {
            get
            {
                if (m_ExposureModeFeature == null)
                    m_ExposureModeFeature = Features ["ExposureMode"];
                return m_ExposureModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureModeFeature = null;

        public double ExposureTimeAbs
        {
            get { return ExposureTimeAbsFeature.FloatValue; }
            set { ExposureTimeAbsFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature ExposureTimeAbsFeature
        {
            get
            {
                if (m_ExposureTimeAbsFeature == null)
                    m_ExposureTimeAbsFeature = Features ["ExposureTimeAbs"];
                return m_ExposureTimeAbsFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureTimeAbsFeature = null;

        #endregion

        #region Category /Controls/Exposure/ExposureAutoControl

        public long ExposureAutoAdjustTol
        {
            get { return ExposureAutoAdjustTolFeature.IntValue; }
            set { ExposureAutoAdjustTolFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature ExposureAutoAdjustTolFeature
        {
            get
            {
                if (m_ExposureAutoAdjustTolFeature == null)
                    m_ExposureAutoAdjustTolFeature = Features ["ExposureAutoAdjustTol"];
                return m_ExposureAutoAdjustTolFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureAutoAdjustTolFeature = null;

        public ExposureAutoAlgEnum ExposureAutoAlg
        {
            get { return (ExposureAutoAlgEnum) ExposureAutoAlgFeature.EnumIntValue; }
            set { ExposureAutoAlgFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature ExposureAutoAlgFeature
        {
            get
            {
                if (m_ExposureAutoAlgFeature == null)
                    m_ExposureAutoAlgFeature = Features ["ExposureAutoAlg"];
                return m_ExposureAutoAlgFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureAutoAlgFeature = null;

        public long ExposureAutoMax
        {
            get { return ExposureAutoMaxFeature.IntValue; }
            set { ExposureAutoMaxFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature ExposureAutoMaxFeature
        {
            get
            {
                if (m_ExposureAutoMaxFeature == null)
                    m_ExposureAutoMaxFeature = Features ["ExposureAutoMax"];
                return m_ExposureAutoMaxFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureAutoMaxFeature = null;

        public long ExposureAutoMin
        {
            get { return ExposureAutoMinFeature.IntValue; }
            set { ExposureAutoMinFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature ExposureAutoMinFeature
        {
            get
            {
                if (m_ExposureAutoMinFeature == null)
                    m_ExposureAutoMinFeature = Features ["ExposureAutoMin"];
                return m_ExposureAutoMinFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureAutoMinFeature = null;

        public long ExposureAutoOutliers
        {
            get { return ExposureAutoOutliersFeature.IntValue; }
            set { ExposureAutoOutliersFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature ExposureAutoOutliersFeature
        {
            get
            {
                if (m_ExposureAutoOutliersFeature == null)
                    m_ExposureAutoOutliersFeature = Features ["ExposureAutoOutliers"];
                return m_ExposureAutoOutliersFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureAutoOutliersFeature = null;

        public long ExposureAutoRate
        {
            get { return ExposureAutoRateFeature.IntValue; }
            set { ExposureAutoRateFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature ExposureAutoRateFeature
        {
            get
            {
                if (m_ExposureAutoRateFeature == null)
                    m_ExposureAutoRateFeature = Features ["ExposureAutoRate"];
                return m_ExposureAutoRateFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureAutoRateFeature = null;

        public long ExposureAutoTarget
        {
            get { return ExposureAutoTargetFeature.IntValue; }
            set { ExposureAutoTargetFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature ExposureAutoTargetFeature
        {
            get
            {
                if (m_ExposureAutoTargetFeature == null)
                    m_ExposureAutoTargetFeature = Features ["ExposureAutoTarget"];
                return m_ExposureAutoTargetFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ExposureAutoTargetFeature = null;

        #endregion

        #region Category /Controls/GainControl

        public double Gain
        {
            get { return GainFeature.FloatValue; }
            set { GainFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature GainFeature
        {
            get
            {
                if (m_GainFeature == null)
                    m_GainFeature = Features ["Gain"];
                return m_GainFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainFeature = null;

        public GainAutoEnum GainAuto
        {
            get { return (GainAutoEnum) GainAutoFeature.EnumIntValue; }
            set { GainAutoFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature GainAutoFeature
        {
            get
            {
                if (m_GainAutoFeature == null)
                    m_GainAutoFeature = Features ["GainAuto"];
                return m_GainAutoFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainAutoFeature = null;

        public GainSelectorEnum GainSelector
        {
            get { return (GainSelectorEnum) GainSelectorFeature.EnumIntValue; }
            set { GainSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature GainSelectorFeature
        {
            get
            {
                if (m_GainSelectorFeature == null)
                    m_GainSelectorFeature = Features ["GainSelector"];
                return m_GainSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainSelectorFeature = null;

        #endregion

        #region Category /Controls/GainControl/GainAutoControl

        public long GainAutoAdjustTol
        {
            get { return GainAutoAdjustTolFeature.IntValue; }
            set { GainAutoAdjustTolFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GainAutoAdjustTolFeature
        {
            get
            {
                if (m_GainAutoAdjustTolFeature == null)
                    m_GainAutoAdjustTolFeature = Features ["GainAutoAdjustTol"];
                return m_GainAutoAdjustTolFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainAutoAdjustTolFeature = null;

        public double GainAutoMax
        {
            get { return GainAutoMaxFeature.FloatValue; }
            set { GainAutoMaxFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature GainAutoMaxFeature
        {
            get
            {
                if (m_GainAutoMaxFeature == null)
                    m_GainAutoMaxFeature = Features ["GainAutoMax"];
                return m_GainAutoMaxFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainAutoMaxFeature = null;

        public double GainAutoMin
        {
            get { return GainAutoMinFeature.FloatValue; }
            set { GainAutoMinFeature.FloatValue = value; }
        }
        public AVT.VmbAPINET.Feature GainAutoMinFeature
        {
            get
            {
                if (m_GainAutoMinFeature == null)
                    m_GainAutoMinFeature = Features ["GainAutoMin"];
                return m_GainAutoMinFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainAutoMinFeature = null;

        public long GainAutoOutliers
        {
            get { return GainAutoOutliersFeature.IntValue; }
            set { GainAutoOutliersFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GainAutoOutliersFeature
        {
            get
            {
                if (m_GainAutoOutliersFeature == null)
                    m_GainAutoOutliersFeature = Features ["GainAutoOutliers"];
                return m_GainAutoOutliersFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainAutoOutliersFeature = null;

        public long GainAutoRate
        {
            get { return GainAutoRateFeature.IntValue; }
            set { GainAutoRateFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GainAutoRateFeature
        {
            get
            {
                if (m_GainAutoRateFeature == null)
                    m_GainAutoRateFeature = Features ["GainAutoRate"];
                return m_GainAutoRateFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainAutoRateFeature = null;

        public long GainAutoTarget
        {
            get { return GainAutoTargetFeature.IntValue; }
            set { GainAutoTargetFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GainAutoTargetFeature
        {
            get
            {
                if (m_GainAutoTargetFeature == null)
                    m_GainAutoTargetFeature = Features ["GainAutoTarget"];
                return m_GainAutoTargetFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GainAutoTargetFeature = null;

        #endregion

        #region Category /Controls/LUTControl

        public bool LUTEnable
        {
            get { return LUTEnableFeature.BoolValue; }
            set { LUTEnableFeature.BoolValue = value; }
        }
        public AVT.VmbAPINET.Feature LUTEnableFeature
        {
            get
            {
                if (m_LUTEnableFeature == null)
                    m_LUTEnableFeature = Features ["LUTEnable"];
                return m_LUTEnableFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTEnableFeature = null;

        public long LUTIndex
        {
            get { return LUTIndexFeature.IntValue; }
            set { LUTIndexFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature LUTIndexFeature
        {
            get
            {
                if (m_LUTIndexFeature == null)
                    m_LUTIndexFeature = Features ["LUTIndex"];
                return m_LUTIndexFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTIndexFeature = null;

        public LUTModeEnum LUTMode
        {
            get { return (LUTModeEnum) LUTModeFeature.EnumIntValue; }
            set { LUTModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature LUTModeFeature
        {
            get
            {
                if (m_LUTModeFeature == null)
                    m_LUTModeFeature = Features ["LUTMode"];
                return m_LUTModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTModeFeature = null;

        public LUTSelectorEnum LUTSelector
        {
            get { return (LUTSelectorEnum) LUTSelectorFeature.EnumIntValue; }
            set { LUTSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature LUTSelectorFeature
        {
            get
            {
                if (m_LUTSelectorFeature == null)
                    m_LUTSelectorFeature = Features ["LUTSelector"];
                return m_LUTSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTSelectorFeature = null;

        public long LUTValue
        {
            get { return LUTValueFeature.IntValue; }
            set { LUTValueFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature LUTValueFeature
        {
            get
            {
                if (m_LUTValueFeature == null)
                    m_LUTValueFeature = Features ["LUTValue"];
                return m_LUTValueFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTValueFeature = null;

        #endregion

        #region Category /Controls/LUTControl/LUTInfo

        public long LUTAddress
        {
            get { return LUTAddressFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature LUTAddressFeature
        {
            get
            {
                if (m_LUTAddressFeature == null)
                    m_LUTAddressFeature = Features ["LUTAddress"];
                return m_LUTAddressFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTAddressFeature = null;

        public long LUTBitDepthIn
        {
            get { return LUTBitDepthInFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature LUTBitDepthInFeature
        {
            get
            {
                if (m_LUTBitDepthInFeature == null)
                    m_LUTBitDepthInFeature = Features ["LUTBitDepthIn"];
                return m_LUTBitDepthInFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTBitDepthInFeature = null;

        public long LUTBitDepthOut
        {
            get { return LUTBitDepthOutFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature LUTBitDepthOutFeature
        {
            get
            {
                if (m_LUTBitDepthOutFeature == null)
                    m_LUTBitDepthOutFeature = Features ["LUTBitDepthOut"];
                return m_LUTBitDepthOutFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTBitDepthOutFeature = null;

        public long LUTSizeBytes
        {
            get { return LUTSizeBytesFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature LUTSizeBytesFeature
        {
            get
            {
                if (m_LUTSizeBytesFeature == null)
                    m_LUTSizeBytesFeature = Features ["LUTSizeBytes"];
                return m_LUTSizeBytesFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTSizeBytesFeature = null;

        #endregion

        #region Category /DeviceStatus

        public double DeviceTemperature
        {
            get { return DeviceTemperatureFeature.FloatValue; }
        }
        public AVT.VmbAPINET.Feature DeviceTemperatureFeature
        {
            get
            {
                if (m_DeviceTemperatureFeature == null)
                    m_DeviceTemperatureFeature = Features ["DeviceTemperature"];
                return m_DeviceTemperatureFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceTemperatureFeature = null;

        public DeviceTemperatureSelectorEnum DeviceTemperatureSelector
        {
            get { return (DeviceTemperatureSelectorEnum) DeviceTemperatureSelectorFeature.EnumIntValue; }
            set { DeviceTemperatureSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature DeviceTemperatureSelectorFeature
        {
            get
            {
                if (m_DeviceTemperatureSelectorFeature == null)
                    m_DeviceTemperatureSelectorFeature = Features ["DeviceTemperatureSelector"];
                return m_DeviceTemperatureSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceTemperatureSelectorFeature = null;

        #endregion

        #region Category /EventControl

        public EventNotificationEnum EventNotification
        {
            get { return (EventNotificationEnum) EventNotificationFeature.EnumIntValue; }
            set { EventNotificationFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature EventNotificationFeature
        {
            get
            {
                if (m_EventNotificationFeature == null)
                    m_EventNotificationFeature = Features ["EventNotification"];
                return m_EventNotificationFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventNotificationFeature = null;

        public EventSelectorEnum EventSelector
        {
            get { return (EventSelectorEnum) EventSelectorFeature.EnumIntValue; }
            set { EventSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature EventSelectorFeature
        {
            get
            {
                if (m_EventSelectorFeature == null)
                    m_EventSelectorFeature = Features ["EventSelector"];
                return m_EventSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventSelectorFeature = null;

        public long EventsEnable1
        {
            get { return EventsEnable1Feature.IntValue; }
            set { EventsEnable1Feature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature EventsEnable1Feature
        {
            get
            {
                if (m_EventsEnable1Feature == null)
                    m_EventsEnable1Feature = Features ["EventsEnable1"];
                return m_EventsEnable1Feature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventsEnable1Feature = null;

        #endregion

        #region Category /EventControl/EventData

        public long EventAcquisitionEndFrameID
        {
            get { return EventAcquisitionEndFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventAcquisitionEndFrameIDFeature
        {
            get
            {
                if (m_EventAcquisitionEndFrameIDFeature == null)
                    m_EventAcquisitionEndFrameIDFeature = Features ["EventAcquisitionEndFrameID"];
                return m_EventAcquisitionEndFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventAcquisitionEndFrameIDFeature = null;

        public long EventAcquisitionEndTimestamp
        {
            get { return EventAcquisitionEndTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventAcquisitionEndTimestampFeature
        {
            get
            {
                if (m_EventAcquisitionEndTimestampFeature == null)
                    m_EventAcquisitionEndTimestampFeature = Features ["EventAcquisitionEndTimestamp"];
                return m_EventAcquisitionEndTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventAcquisitionEndTimestampFeature = null;

        public long EventAcquisitionRecordTriggerFrameID
        {
            get { return EventAcquisitionRecordTriggerFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventAcquisitionRecordTriggerFrameIDFeature
        {
            get
            {
                if (m_EventAcquisitionRecordTriggerFrameIDFeature == null)
                    m_EventAcquisitionRecordTriggerFrameIDFeature = Features ["EventAcquisitionRecordTriggerFrameID"];
                return m_EventAcquisitionRecordTriggerFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventAcquisitionRecordTriggerFrameIDFeature = null;

        public long EventAcquisitionRecordTriggerTimestamp
        {
            get { return EventAcquisitionRecordTriggerTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventAcquisitionRecordTriggerTimestampFeature
        {
            get
            {
                if (m_EventAcquisitionRecordTriggerTimestampFeature == null)
                    m_EventAcquisitionRecordTriggerTimestampFeature = Features ["EventAcquisitionRecordTriggerTimestamp"];
                return m_EventAcquisitionRecordTriggerTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventAcquisitionRecordTriggerTimestampFeature = null;

        public long EventAcquisitionStartFrameID
        {
            get { return EventAcquisitionStartFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventAcquisitionStartFrameIDFeature
        {
            get
            {
                if (m_EventAcquisitionStartFrameIDFeature == null)
                    m_EventAcquisitionStartFrameIDFeature = Features ["EventAcquisitionStartFrameID"];
                return m_EventAcquisitionStartFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventAcquisitionStartFrameIDFeature = null;

        public long EventAcquisitionStartTimestamp
        {
            get { return EventAcquisitionStartTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventAcquisitionStartTimestampFeature
        {
            get
            {
                if (m_EventAcquisitionStartTimestampFeature == null)
                    m_EventAcquisitionStartTimestampFeature = Features ["EventAcquisitionStartTimestamp"];
                return m_EventAcquisitionStartTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventAcquisitionStartTimestampFeature = null;

        public long EventErrorFrameID
        {
            get { return EventErrorFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventErrorFrameIDFeature
        {
            get
            {
                if (m_EventErrorFrameIDFeature == null)
                    m_EventErrorFrameIDFeature = Features ["EventErrorFrameID"];
                return m_EventErrorFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventErrorFrameIDFeature = null;

        public long EventErrorTimestamp
        {
            get { return EventErrorTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventErrorTimestampFeature
        {
            get
            {
                if (m_EventErrorTimestampFeature == null)
                    m_EventErrorTimestampFeature = Features ["EventErrorTimestamp"];
                return m_EventErrorTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventErrorTimestampFeature = null;

        public long EventExposureEndFrameID
        {
            get { return EventExposureEndFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventExposureEndFrameIDFeature
        {
            get
            {
                if (m_EventExposureEndFrameIDFeature == null)
                    m_EventExposureEndFrameIDFeature = Features ["EventExposureEndFrameID"];
                return m_EventExposureEndFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventExposureEndFrameIDFeature = null;

        public long EventExposureEndTimestamp
        {
            get { return EventExposureEndTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventExposureEndTimestampFeature
        {
            get
            {
                if (m_EventExposureEndTimestampFeature == null)
                    m_EventExposureEndTimestampFeature = Features ["EventExposureEndTimestamp"];
                return m_EventExposureEndTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventExposureEndTimestampFeature = null;

        public long EventExposureStartFrameID
        {
            get { return EventExposureStartFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventExposureStartFrameIDFeature
        {
            get
            {
                if (m_EventExposureStartFrameIDFeature == null)
                    m_EventExposureStartFrameIDFeature = Features ["EventExposureStartFrameID"];
                return m_EventExposureStartFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventExposureStartFrameIDFeature = null;

        public long EventExposureStartTimestamp
        {
            get { return EventExposureStartTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventExposureStartTimestampFeature
        {
            get
            {
                if (m_EventExposureStartTimestampFeature == null)
                    m_EventExposureStartTimestampFeature = Features ["EventExposureStartTimestamp"];
                return m_EventExposureStartTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventExposureStartTimestampFeature = null;

        public long EventFrameTriggerFrameID
        {
            get { return EventFrameTriggerFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventFrameTriggerFrameIDFeature
        {
            get
            {
                if (m_EventFrameTriggerFrameIDFeature == null)
                    m_EventFrameTriggerFrameIDFeature = Features ["EventFrameTriggerFrameID"];
                return m_EventFrameTriggerFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventFrameTriggerFrameIDFeature = null;

        public long EventFrameTriggerReadyFrameID
        {
            get { return EventFrameTriggerReadyFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventFrameTriggerReadyFrameIDFeature
        {
            get
            {
                if (m_EventFrameTriggerReadyFrameIDFeature == null)
                    m_EventFrameTriggerReadyFrameIDFeature = Features ["EventFrameTriggerReadyFrameID"];
                return m_EventFrameTriggerReadyFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventFrameTriggerReadyFrameIDFeature = null;

        public long EventFrameTriggerReadyTimestamp
        {
            get { return EventFrameTriggerReadyTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventFrameTriggerReadyTimestampFeature
        {
            get
            {
                if (m_EventFrameTriggerReadyTimestampFeature == null)
                    m_EventFrameTriggerReadyTimestampFeature = Features ["EventFrameTriggerReadyTimestamp"];
                return m_EventFrameTriggerReadyTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventFrameTriggerReadyTimestampFeature = null;

        public long EventFrameTriggerTimestamp
        {
            get { return EventFrameTriggerTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventFrameTriggerTimestampFeature
        {
            get
            {
                if (m_EventFrameTriggerTimestampFeature == null)
                    m_EventFrameTriggerTimestampFeature = Features ["EventFrameTriggerTimestamp"];
                return m_EventFrameTriggerTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventFrameTriggerTimestampFeature = null;

        public long EventLine1FallingEdgeFrameID
        {
            get { return EventLine1FallingEdgeFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventLine1FallingEdgeFrameIDFeature
        {
            get
            {
                if (m_EventLine1FallingEdgeFrameIDFeature == null)
                    m_EventLine1FallingEdgeFrameIDFeature = Features ["EventLine1FallingEdgeFrameID"];
                return m_EventLine1FallingEdgeFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventLine1FallingEdgeFrameIDFeature = null;

        public long EventLine1FallingEdgeTimestamp
        {
            get { return EventLine1FallingEdgeTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventLine1FallingEdgeTimestampFeature
        {
            get
            {
                if (m_EventLine1FallingEdgeTimestampFeature == null)
                    m_EventLine1FallingEdgeTimestampFeature = Features ["EventLine1FallingEdgeTimestamp"];
                return m_EventLine1FallingEdgeTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventLine1FallingEdgeTimestampFeature = null;

        public long EventLine1RisingEdgeFrameID
        {
            get { return EventLine1RisingEdgeFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventLine1RisingEdgeFrameIDFeature
        {
            get
            {
                if (m_EventLine1RisingEdgeFrameIDFeature == null)
                    m_EventLine1RisingEdgeFrameIDFeature = Features ["EventLine1RisingEdgeFrameID"];
                return m_EventLine1RisingEdgeFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventLine1RisingEdgeFrameIDFeature = null;

        public long EventLine1RisingEdgeTimestamp
        {
            get { return EventLine1RisingEdgeTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventLine1RisingEdgeTimestampFeature
        {
            get
            {
                if (m_EventLine1RisingEdgeTimestampFeature == null)
                    m_EventLine1RisingEdgeTimestampFeature = Features ["EventLine1RisingEdgeTimestamp"];
                return m_EventLine1RisingEdgeTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventLine1RisingEdgeTimestampFeature = null;

        public long EventOverflowFrameID
        {
            get { return EventOverflowFrameIDFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventOverflowFrameIDFeature
        {
            get
            {
                if (m_EventOverflowFrameIDFeature == null)
                    m_EventOverflowFrameIDFeature = Features ["EventOverflowFrameID"];
                return m_EventOverflowFrameIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventOverflowFrameIDFeature = null;

        public long EventOverflowTimestamp
        {
            get { return EventOverflowTimestampFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventOverflowTimestampFeature
        {
            get
            {
                if (m_EventOverflowTimestampFeature == null)
                    m_EventOverflowTimestampFeature = Features ["EventOverflowTimestamp"];
                return m_EventOverflowTimestampFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventOverflowTimestampFeature = null;

        #endregion

        #region Category /EventControl/EventID

        public long EventAcquisitionEnd
        {
            get { return EventAcquisitionEndFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventAcquisitionEndFeature
        {
            get
            {
                if (m_EventAcquisitionEndFeature == null)
                    m_EventAcquisitionEndFeature = Features ["EventAcquisitionEnd"];
                return m_EventAcquisitionEndFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventAcquisitionEndFeature = null;

        public long EventAcquisitionRecordTrigger
        {
            get { return EventAcquisitionRecordTriggerFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventAcquisitionRecordTriggerFeature
        {
            get
            {
                if (m_EventAcquisitionRecordTriggerFeature == null)
                    m_EventAcquisitionRecordTriggerFeature = Features ["EventAcquisitionRecordTrigger"];
                return m_EventAcquisitionRecordTriggerFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventAcquisitionRecordTriggerFeature = null;

        public long EventAcquisitionStart
        {
            get { return EventAcquisitionStartFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventAcquisitionStartFeature
        {
            get
            {
                if (m_EventAcquisitionStartFeature == null)
                    m_EventAcquisitionStartFeature = Features ["EventAcquisitionStart"];
                return m_EventAcquisitionStartFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventAcquisitionStartFeature = null;

        public long EventError
        {
            get { return EventErrorFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventErrorFeature
        {
            get
            {
                if (m_EventErrorFeature == null)
                    m_EventErrorFeature = Features ["EventError"];
                return m_EventErrorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventErrorFeature = null;

        public long EventExposureEnd
        {
            get { return EventExposureEndFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventExposureEndFeature
        {
            get
            {
                if (m_EventExposureEndFeature == null)
                    m_EventExposureEndFeature = Features ["EventExposureEnd"];
                return m_EventExposureEndFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventExposureEndFeature = null;

        public long EventExposureStart
        {
            get { return EventExposureStartFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventExposureStartFeature
        {
            get
            {
                if (m_EventExposureStartFeature == null)
                    m_EventExposureStartFeature = Features ["EventExposureStart"];
                return m_EventExposureStartFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventExposureStartFeature = null;

        public long EventFrameTrigger
        {
            get { return EventFrameTriggerFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventFrameTriggerFeature
        {
            get
            {
                if (m_EventFrameTriggerFeature == null)
                    m_EventFrameTriggerFeature = Features ["EventFrameTrigger"];
                return m_EventFrameTriggerFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventFrameTriggerFeature = null;

        public long EventFrameTriggerReady
        {
            get { return EventFrameTriggerReadyFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventFrameTriggerReadyFeature
        {
            get
            {
                if (m_EventFrameTriggerReadyFeature == null)
                    m_EventFrameTriggerReadyFeature = Features ["EventFrameTriggerReady"];
                return m_EventFrameTriggerReadyFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventFrameTriggerReadyFeature = null;

        public long EventLine1FallingEdge
        {
            get { return EventLine1FallingEdgeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventLine1FallingEdgeFeature
        {
            get
            {
                if (m_EventLine1FallingEdgeFeature == null)
                    m_EventLine1FallingEdgeFeature = Features ["EventLine1FallingEdge"];
                return m_EventLine1FallingEdgeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventLine1FallingEdgeFeature = null;

        public long EventLine1RisingEdge
        {
            get { return EventLine1RisingEdgeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventLine1RisingEdgeFeature
        {
            get
            {
                if (m_EventLine1RisingEdgeFeature == null)
                    m_EventLine1RisingEdgeFeature = Features ["EventLine1RisingEdge"];
                return m_EventLine1RisingEdgeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventLine1RisingEdgeFeature = null;

        public long EventLine2FallingEdge
        {
            get { return EventLine2FallingEdgeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventLine2FallingEdgeFeature
        {
            get
            {
                if (m_EventLine2FallingEdgeFeature == null)
                    m_EventLine2FallingEdgeFeature = Features ["EventLine2FallingEdge"];
                return m_EventLine2FallingEdgeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventLine2FallingEdgeFeature = null;

        public long EventLine2RisingEdge
        {
            get { return EventLine2RisingEdgeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventLine2RisingEdgeFeature
        {
            get
            {
                if (m_EventLine2RisingEdgeFeature == null)
                    m_EventLine2RisingEdgeFeature = Features ["EventLine2RisingEdge"];
                return m_EventLine2RisingEdgeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventLine2RisingEdgeFeature = null;

        public long EventOverflow
        {
            get { return EventOverflowFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature EventOverflowFeature
        {
            get
            {
                if (m_EventOverflowFeature == null)
                    m_EventOverflowFeature = Features ["EventOverflow"];
                return m_EventOverflowFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_EventOverflowFeature = null;

        #endregion

        #region Category /GigE

        public BandwidthControlModeEnum BandwidthControlMode
        {
            get { return (BandwidthControlModeEnum) BandwidthControlModeFeature.EnumIntValue; }
            set { BandwidthControlModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature BandwidthControlModeFeature
        {
            get
            {
                if (m_BandwidthControlModeFeature == null)
                    m_BandwidthControlModeFeature = Features ["BandwidthControlMode"];
                return m_BandwidthControlModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_BandwidthControlModeFeature = null;

        public bool ChunkModeActive
        {
            get { return ChunkModeActiveFeature.BoolValue; }
            set { ChunkModeActiveFeature.BoolValue = value; }
        }
        public AVT.VmbAPINET.Feature ChunkModeActiveFeature
        {
            get
            {
                if (m_ChunkModeActiveFeature == null)
                    m_ChunkModeActiveFeature = Features ["ChunkModeActive"];
                return m_ChunkModeActiveFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ChunkModeActiveFeature = null;

        public long GevSCPSPacketSize
        {
            get { return GevSCPSPacketSizeFeature.IntValue; }
            set { GevSCPSPacketSizeFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GevSCPSPacketSizeFeature
        {
            get
            {
                if (m_GevSCPSPacketSizeFeature == null)
                    m_GevSCPSPacketSizeFeature = Features ["GevSCPSPacketSize"];
                return m_GevSCPSPacketSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevSCPSPacketSizeFeature = null;

        public long NonImagePayloadSize
        {
            get { return NonImagePayloadSizeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature NonImagePayloadSizeFeature
        {
            get
            {
                if (m_NonImagePayloadSizeFeature == null)
                    m_NonImagePayloadSizeFeature = Features ["NonImagePayloadSize"];
                return m_NonImagePayloadSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_NonImagePayloadSizeFeature = null;

        public long PayloadSize
        {
            get { return PayloadSizeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature PayloadSizeFeature
        {
            get
            {
                if (m_PayloadSizeFeature == null)
                    m_PayloadSizeFeature = Features ["PayloadSize"];
                return m_PayloadSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_PayloadSizeFeature = null;

        public long StreamBytesPerSecond
        {
            get { return StreamBytesPerSecondFeature.IntValue; }
            set { StreamBytesPerSecondFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature StreamBytesPerSecondFeature
        {
            get
            {
                if (m_StreamBytesPerSecondFeature == null)
                    m_StreamBytesPerSecondFeature = Features ["StreamBytesPerSecond"];
                return m_StreamBytesPerSecondFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamBytesPerSecondFeature = null;

        public bool StreamFrameRateConstrain
        {
            get { return StreamFrameRateConstrainFeature.BoolValue; }
            set { StreamFrameRateConstrainFeature.BoolValue = value; }
        }
        public AVT.VmbAPINET.Feature StreamFrameRateConstrainFeature
        {
            get
            {
                if (m_StreamFrameRateConstrainFeature == null)
                    m_StreamFrameRateConstrainFeature = Features ["StreamFrameRateConstrain"];
                return m_StreamFrameRateConstrainFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamFrameRateConstrainFeature = null;

        #endregion

        #region Category /GigE/Configuration

        public GevIPConfigurationModeEnum GevIPConfigurationMode
        {
            get { return (GevIPConfigurationModeEnum) GevIPConfigurationModeFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature GevIPConfigurationModeFeature
        {
            get
            {
                if (m_GevIPConfigurationModeFeature == null)
                    m_GevIPConfigurationModeFeature = Features ["GevIPConfigurationMode"];
                return m_GevIPConfigurationModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevIPConfigurationModeFeature = null;

        #endregion

        #region Category /GigE/Current

        public long GevCurrentDefaultGateway
        {
            get { return GevCurrentDefaultGatewayFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature GevCurrentDefaultGatewayFeature
        {
            get
            {
                if (m_GevCurrentDefaultGatewayFeature == null)
                    m_GevCurrentDefaultGatewayFeature = Features ["GevCurrentDefaultGateway"];
                return m_GevCurrentDefaultGatewayFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevCurrentDefaultGatewayFeature = null;

        public long GevCurrentIPAddress
        {
            get { return GevCurrentIPAddressFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature GevCurrentIPAddressFeature
        {
            get
            {
                if (m_GevCurrentIPAddressFeature == null)
                    m_GevCurrentIPAddressFeature = Features ["GevCurrentIPAddress"];
                return m_GevCurrentIPAddressFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevCurrentIPAddressFeature = null;

        public long GevCurrentSubnetMask
        {
            get { return GevCurrentSubnetMaskFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature GevCurrentSubnetMaskFeature
        {
            get
            {
                if (m_GevCurrentSubnetMaskFeature == null)
                    m_GevCurrentSubnetMaskFeature = Features ["GevCurrentSubnetMask"];
                return m_GevCurrentSubnetMaskFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevCurrentSubnetMaskFeature = null;

        #endregion

        #region Category /GigE/GVCP

        public long GVCPCmdRetries
        {
            get { return GVCPCmdRetriesFeature.IntValue; }
            set { GVCPCmdRetriesFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVCPCmdRetriesFeature
        {
            get
            {
                if (m_GVCPCmdRetriesFeature == null)
                    m_GVCPCmdRetriesFeature = Features ["GVCPCmdRetries"];
                return m_GVCPCmdRetriesFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVCPCmdRetriesFeature = null;

        public long GVCPCmdTimeout
        {
            get { return GVCPCmdTimeoutFeature.IntValue; }
            set { GVCPCmdTimeoutFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVCPCmdTimeoutFeature
        {
            get
            {
                if (m_GVCPCmdTimeoutFeature == null)
                    m_GVCPCmdTimeoutFeature = Features ["GVCPCmdTimeout"];
                return m_GVCPCmdTimeoutFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVCPCmdTimeoutFeature = null;

        public long GevHeartbeatInterval
        {
            get { return GevHeartbeatIntervalFeature.IntValue; }
            set { GevHeartbeatIntervalFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GevHeartbeatIntervalFeature
        {
            get
            {
                if (m_GevHeartbeatIntervalFeature == null)
                    m_GevHeartbeatIntervalFeature = Features ["GevHeartbeatInterval"];
                return m_GevHeartbeatIntervalFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevHeartbeatIntervalFeature = null;

        public long GevHeartbeatTimeout
        {
            get { return GevHeartbeatTimeoutFeature.IntValue; }
            set { GevHeartbeatTimeoutFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GevHeartbeatTimeoutFeature
        {
            get
            {
                if (m_GevHeartbeatTimeoutFeature == null)
                    m_GevHeartbeatTimeoutFeature = Features ["GevHeartbeatTimeout"];
                return m_GevHeartbeatTimeoutFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevHeartbeatTimeoutFeature = null;

        #endregion

        #region Category /GigE/Persistent

        public long GevPersistentDefaultGateway
        {
            get { return GevPersistentDefaultGatewayFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature GevPersistentDefaultGatewayFeature
        {
            get
            {
                if (m_GevPersistentDefaultGatewayFeature == null)
                    m_GevPersistentDefaultGatewayFeature = Features ["GevPersistentDefaultGateway"];
                return m_GevPersistentDefaultGatewayFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevPersistentDefaultGatewayFeature = null;

        public long GevPersistentIPAddress
        {
            get { return GevPersistentIPAddressFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature GevPersistentIPAddressFeature
        {
            get
            {
                if (m_GevPersistentIPAddressFeature == null)
                    m_GevPersistentIPAddressFeature = Features ["GevPersistentIPAddress"];
                return m_GevPersistentIPAddressFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevPersistentIPAddressFeature = null;

        public long GevPersistentSubnetMask
        {
            get { return GevPersistentSubnetMaskFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature GevPersistentSubnetMaskFeature
        {
            get
            {
                if (m_GevPersistentSubnetMaskFeature == null)
                    m_GevPersistentSubnetMaskFeature = Features ["GevPersistentSubnetMask"];
                return m_GevPersistentSubnetMaskFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevPersistentSubnetMaskFeature = null;

        #endregion

        #region Category /GigE/StreamHold

        public long StreamHoldCapacity
        {
            get { return StreamHoldCapacityFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StreamHoldCapacityFeature
        {
            get
            {
                if (m_StreamHoldCapacityFeature == null)
                    m_StreamHoldCapacityFeature = Features ["StreamHoldCapacity"];
                return m_StreamHoldCapacityFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamHoldCapacityFeature = null;

        public StreamHoldEnableEnum StreamHoldEnable
        {
            get { return (StreamHoldEnableEnum) StreamHoldEnableFeature.EnumIntValue; }
            set { StreamHoldEnableFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature StreamHoldEnableFeature
        {
            get
            {
                if (m_StreamHoldEnableFeature == null)
                    m_StreamHoldEnableFeature = Features ["StreamHoldEnable"];
                return m_StreamHoldEnableFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamHoldEnableFeature = null;

        #endregion

        #region Category /GigE/Timestamp

        public long GevTimestampTickFrequency
        {
            get { return GevTimestampTickFrequencyFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature GevTimestampTickFrequencyFeature
        {
            get
            {
                if (m_GevTimestampTickFrequencyFeature == null)
                    m_GevTimestampTickFrequencyFeature = Features ["GevTimestampTickFrequency"];
                return m_GevTimestampTickFrequencyFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevTimestampTickFrequencyFeature = null;

        public long GevTimestampValue
        {
            get { return GevTimestampValueFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature GevTimestampValueFeature
        {
            get
            {
                if (m_GevTimestampValueFeature == null)
                    m_GevTimestampValueFeature = Features ["GevTimestampValue"];
                return m_GevTimestampValueFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevTimestampValueFeature = null;

        #endregion

        #region Category /IO/Strobe

        public long StrobeDelay
        {
            get { return StrobeDelayFeature.IntValue; }
            set { StrobeDelayFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature StrobeDelayFeature
        {
            get
            {
                if (m_StrobeDelayFeature == null)
                    m_StrobeDelayFeature = Features ["StrobeDelay"];
                return m_StrobeDelayFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StrobeDelayFeature = null;

        public long StrobeDuration
        {
            get { return StrobeDurationFeature.IntValue; }
            set { StrobeDurationFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature StrobeDurationFeature
        {
            get
            {
                if (m_StrobeDurationFeature == null)
                    m_StrobeDurationFeature = Features ["StrobeDuration"];
                return m_StrobeDurationFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StrobeDurationFeature = null;

        public StrobeDurationModeEnum StrobeDurationMode
        {
            get { return (StrobeDurationModeEnum) StrobeDurationModeFeature.EnumIntValue; }
            set { StrobeDurationModeFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature StrobeDurationModeFeature
        {
            get
            {
                if (m_StrobeDurationModeFeature == null)
                    m_StrobeDurationModeFeature = Features ["StrobeDurationMode"];
                return m_StrobeDurationModeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StrobeDurationModeFeature = null;

        public StrobeSourceEnum StrobeSource
        {
            get { return (StrobeSourceEnum) StrobeSourceFeature.EnumIntValue; }
            set { StrobeSourceFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature StrobeSourceFeature
        {
            get
            {
                if (m_StrobeSourceFeature == null)
                    m_StrobeSourceFeature = Features ["StrobeSource"];
                return m_StrobeSourceFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StrobeSourceFeature = null;

        #endregion

        #region Category /IO/SyncIn

        public long SyncInGlitchFilter
        {
            get { return SyncInGlitchFilterFeature.IntValue; }
            set { SyncInGlitchFilterFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature SyncInGlitchFilterFeature
        {
            get
            {
                if (m_SyncInGlitchFilterFeature == null)
                    m_SyncInGlitchFilterFeature = Features ["SyncInGlitchFilter"];
                return m_SyncInGlitchFilterFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SyncInGlitchFilterFeature = null;

        public long SyncInLevels
        {
            get { return SyncInLevelsFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature SyncInLevelsFeature
        {
            get
            {
                if (m_SyncInLevelsFeature == null)
                    m_SyncInLevelsFeature = Features ["SyncInLevels"];
                return m_SyncInLevelsFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SyncInLevelsFeature = null;

        public SyncInSelectorEnum SyncInSelector
        {
            get { return (SyncInSelectorEnum) SyncInSelectorFeature.EnumIntValue; }
            set { SyncInSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature SyncInSelectorFeature
        {
            get
            {
                if (m_SyncInSelectorFeature == null)
                    m_SyncInSelectorFeature = Features ["SyncInSelector"];
                return m_SyncInSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SyncInSelectorFeature = null;

        #endregion

        #region Category /IO/SyncOut

        public long SyncOutLevels
        {
            get { return SyncOutLevelsFeature.IntValue; }
            set { SyncOutLevelsFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature SyncOutLevelsFeature
        {
            get
            {
                if (m_SyncOutLevelsFeature == null)
                    m_SyncOutLevelsFeature = Features ["SyncOutLevels"];
                return m_SyncOutLevelsFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SyncOutLevelsFeature = null;

        public SyncOutPolarityEnum SyncOutPolarity
        {
            get { return (SyncOutPolarityEnum) SyncOutPolarityFeature.EnumIntValue; }
            set { SyncOutPolarityFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature SyncOutPolarityFeature
        {
            get
            {
                if (m_SyncOutPolarityFeature == null)
                    m_SyncOutPolarityFeature = Features ["SyncOutPolarity"];
                return m_SyncOutPolarityFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SyncOutPolarityFeature = null;

        public SyncOutSelectorEnum SyncOutSelector
        {
            get { return (SyncOutSelectorEnum) SyncOutSelectorFeature.EnumIntValue; }
            set { SyncOutSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature SyncOutSelectorFeature
        {
            get
            {
                if (m_SyncOutSelectorFeature == null)
                    m_SyncOutSelectorFeature = Features ["SyncOutSelector"];
                return m_SyncOutSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SyncOutSelectorFeature = null;

        public SyncOutSourceEnum SyncOutSource
        {
            get { return (SyncOutSourceEnum) SyncOutSourceFeature.EnumIntValue; }
            set { SyncOutSourceFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature SyncOutSourceFeature
        {
            get
            {
                if (m_SyncOutSourceFeature == null)
                    m_SyncOutSourceFeature = Features ["SyncOutSource"];
                return m_SyncOutSourceFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SyncOutSourceFeature = null;

        #endregion

        #region Category /ImageFormat

        public long Height
        {
            get { return HeightFeature.IntValue; }
            set { HeightFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature HeightFeature
        {
            get
            {
                if (m_HeightFeature == null)
                    m_HeightFeature = Features ["Height"];
                return m_HeightFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_HeightFeature = null;

        public long HeightMax
        {
            get { return HeightMaxFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature HeightMaxFeature
        {
            get
            {
                if (m_HeightMaxFeature == null)
                    m_HeightMaxFeature = Features ["HeightMax"];
                return m_HeightMaxFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_HeightMaxFeature = null;

        public long ImageSize
        {
            get { return ImageSizeFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature ImageSizeFeature
        {
            get
            {
                if (m_ImageSizeFeature == null)
                    m_ImageSizeFeature = Features ["ImageSize"];
                return m_ImageSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_ImageSizeFeature = null;

        public long OffsetX
        {
            get { return OffsetXFeature.IntValue; }
            set { OffsetXFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature OffsetXFeature
        {
            get
            {
                if (m_OffsetXFeature == null)
                    m_OffsetXFeature = Features ["OffsetX"];
                return m_OffsetXFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_OffsetXFeature = null;

        public long OffsetY
        {
            get { return OffsetYFeature.IntValue; }
            set { OffsetYFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature OffsetYFeature
        {
            get
            {
                if (m_OffsetYFeature == null)
                    m_OffsetYFeature = Features ["OffsetY"];
                return m_OffsetYFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_OffsetYFeature = null;

        public PixelFormatEnum PixelFormat
        {
            get { return (PixelFormatEnum) PixelFormatFeature.EnumIntValue; }
            set { PixelFormatFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature PixelFormatFeature
        {
            get
            {
                if (m_PixelFormatFeature == null)
                    m_PixelFormatFeature = Features ["PixelFormat"];
                return m_PixelFormatFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_PixelFormatFeature = null;

        public long Width
        {
            get { return WidthFeature.IntValue; }
            set { WidthFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature WidthFeature
        {
            get
            {
                if (m_WidthFeature == null)
                    m_WidthFeature = Features ["Width"];
                return m_WidthFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_WidthFeature = null;

        public long WidthMax
        {
            get { return WidthMaxFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature WidthMaxFeature
        {
            get
            {
                if (m_WidthMaxFeature == null)
                    m_WidthMaxFeature = Features ["WidthMax"];
                return m_WidthMaxFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_WidthMaxFeature = null;

        #endregion

        #region Category /ImageMode

        public long BinningHorizontal
        {
            get { return BinningHorizontalFeature.IntValue; }
            set { BinningHorizontalFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature BinningHorizontalFeature
        {
            get
            {
                if (m_BinningHorizontalFeature == null)
                    m_BinningHorizontalFeature = Features ["BinningHorizontal"];
                return m_BinningHorizontalFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_BinningHorizontalFeature = null;

        public long BinningVertical
        {
            get { return BinningVerticalFeature.IntValue; }
            set { BinningVerticalFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature BinningVerticalFeature
        {
            get
            {
                if (m_BinningVerticalFeature == null)
                    m_BinningVerticalFeature = Features ["BinningVertical"];
                return m_BinningVerticalFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_BinningVerticalFeature = null;

        public long SensorHeight
        {
            get { return SensorHeightFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature SensorHeightFeature
        {
            get
            {
                if (m_SensorHeightFeature == null)
                    m_SensorHeightFeature = Features ["SensorHeight"];
                return m_SensorHeightFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SensorHeightFeature = null;

        public long SensorWidth
        {
            get { return SensorWidthFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature SensorWidthFeature
        {
            get
            {
                if (m_SensorWidthFeature == null)
                    m_SensorWidthFeature = Features ["SensorWidth"];
                return m_SensorWidthFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SensorWidthFeature = null;

        #endregion

        #region Category /Info

        public string DeviceFirmwareVersion
        {
            get { return DeviceFirmwareVersionFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceFirmwareVersionFeature
        {
            get
            {
                if (m_DeviceFirmwareVersionFeature == null)
                    m_DeviceFirmwareVersionFeature = Features ["DeviceFirmwareVersion"];
                return m_DeviceFirmwareVersionFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceFirmwareVersionFeature = null;

        public string DeviceID
        {
            get { return DeviceIDFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceIDFeature
        {
            get
            {
                if (m_DeviceIDFeature == null)
                    m_DeviceIDFeature = Features ["DeviceID"];
                return m_DeviceIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceIDFeature = null;

        public string DeviceModelName
        {
            get { return DeviceModelNameFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceModelNameFeature
        {
            get
            {
                if (m_DeviceModelNameFeature == null)
                    m_DeviceModelNameFeature = Features ["DeviceModelName"];
                return m_DeviceModelNameFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceModelNameFeature = null;

        public string DevicePartNumber
        {
            get { return DevicePartNumberFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DevicePartNumberFeature
        {
            get
            {
                if (m_DevicePartNumberFeature == null)
                    m_DevicePartNumberFeature = Features ["DevicePartNumber"];
                return m_DevicePartNumberFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DevicePartNumberFeature = null;

        public DeviceScanTypeEnum DeviceScanType
        {
            get { return (DeviceScanTypeEnum) DeviceScanTypeFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature DeviceScanTypeFeature
        {
            get
            {
                if (m_DeviceScanTypeFeature == null)
                    m_DeviceScanTypeFeature = Features ["DeviceScanType"];
                return m_DeviceScanTypeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceScanTypeFeature = null;

        public string DeviceUserID
        {
            get { return DeviceUserIDFeature.StringValue; }
            set { DeviceUserIDFeature.StringValue = value; }
        }
        public AVT.VmbAPINET.Feature DeviceUserIDFeature
        {
            get
            {
                if (m_DeviceUserIDFeature == null)
                    m_DeviceUserIDFeature = Features ["DeviceUserID"];
                return m_DeviceUserIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceUserIDFeature = null;

        public string DeviceVendorName
        {
            get { return DeviceVendorNameFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature DeviceVendorNameFeature
        {
            get
            {
                if (m_DeviceVendorNameFeature == null)
                    m_DeviceVendorNameFeature = Features ["DeviceVendorName"];
                return m_DeviceVendorNameFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_DeviceVendorNameFeature = null;

        public long FirmwareVerBuild
        {
            get { return FirmwareVerBuildFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature FirmwareVerBuildFeature
        {
            get
            {
                if (m_FirmwareVerBuildFeature == null)
                    m_FirmwareVerBuildFeature = Features ["FirmwareVerBuild"];
                return m_FirmwareVerBuildFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FirmwareVerBuildFeature = null;

        public long FirmwareVerMajor
        {
            get { return FirmwareVerMajorFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature FirmwareVerMajorFeature
        {
            get
            {
                if (m_FirmwareVerMajorFeature == null)
                    m_FirmwareVerMajorFeature = Features ["FirmwareVerMajor"];
                return m_FirmwareVerMajorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FirmwareVerMajorFeature = null;

        public long FirmwareVerMinor
        {
            get { return FirmwareVerMinorFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature FirmwareVerMinorFeature
        {
            get
            {
                if (m_FirmwareVerMinorFeature == null)
                    m_FirmwareVerMinorFeature = Features ["FirmwareVerMinor"];
                return m_FirmwareVerMinorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_FirmwareVerMinorFeature = null;

        public long GevDeviceMACAddress
        {
            get { return GevDeviceMACAddressFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature GevDeviceMACAddressFeature
        {
            get
            {
                if (m_GevDeviceMACAddressFeature == null)
                    m_GevDeviceMACAddressFeature = Features ["GevDeviceMACAddress"];
                return m_GevDeviceMACAddressFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevDeviceMACAddressFeature = null;

        public long SensorBits
        {
            get { return SensorBitsFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature SensorBitsFeature
        {
            get
            {
                if (m_SensorBitsFeature == null)
                    m_SensorBitsFeature = Features ["SensorBits"];
                return m_SensorBitsFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SensorBitsFeature = null;

        public SensorTypeEnum SensorType
        {
            get { return (SensorTypeEnum) SensorTypeFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature SensorTypeFeature
        {
            get
            {
                if (m_SensorTypeFeature == null)
                    m_SensorTypeFeature = Features ["SensorType"];
                return m_SensorTypeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_SensorTypeFeature = null;

        #endregion

        #region Category /SavedUserSets

        public UserSetDefaultSelectorEnum UserSetDefaultSelector
        {
            get { return (UserSetDefaultSelectorEnum) UserSetDefaultSelectorFeature.EnumIntValue; }
            set { UserSetDefaultSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature UserSetDefaultSelectorFeature
        {
            get
            {
                if (m_UserSetDefaultSelectorFeature == null)
                    m_UserSetDefaultSelectorFeature = Features ["UserSetDefaultSelector"];
                return m_UserSetDefaultSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_UserSetDefaultSelectorFeature = null;

        public UserSetSelectorEnum UserSetSelector
        {
            get { return (UserSetSelectorEnum) UserSetSelectorFeature.EnumIntValue; }
            set { UserSetSelectorFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature UserSetSelectorFeature
        {
            get
            {
                if (m_UserSetSelectorFeature == null)
                    m_UserSetSelectorFeature = Features ["UserSetSelector"];
                return m_UserSetSelectorFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_UserSetSelectorFeature = null;

        #endregion

        #region Category /Stream/Info

        public string GVSPFilterVersion
        {
            get { return GVSPFilterVersionFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature GVSPFilterVersionFeature
        {
            get
            {
                if (m_GVSPFilterVersionFeature == null)
                    m_GVSPFilterVersionFeature = Features ["GVSPFilterVersion"];
                return m_GVSPFilterVersionFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPFilterVersionFeature = null;

        #endregion

        #region Category /Stream/Multicast

        public bool MulticastEnable
        {
            get { return MulticastEnableFeature.BoolValue; }
            set { MulticastEnableFeature.BoolValue = value; }
        }
        public AVT.VmbAPINET.Feature MulticastEnableFeature
        {
            get
            {
                if (m_MulticastEnableFeature == null)
                    m_MulticastEnableFeature = Features ["MulticastEnable"];
                return m_MulticastEnableFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_MulticastEnableFeature = null;

        public long MulticastIPAddress
        {
            get { return MulticastIPAddressFeature.IntValue; }
            set { MulticastIPAddressFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature MulticastIPAddressFeature
        {
            get
            {
                if (m_MulticastIPAddressFeature == null)
                    m_MulticastIPAddressFeature = Features ["MulticastIPAddress"];
                return m_MulticastIPAddressFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_MulticastIPAddressFeature = null;

        #endregion

        #region Category /Stream/Settings

        public long GVSPBurstSize
        {
            get { return GVSPBurstSizeFeature.IntValue; }
            set { GVSPBurstSizeFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVSPBurstSizeFeature
        {
            get
            {
                if (m_GVSPBurstSizeFeature == null)
                    m_GVSPBurstSizeFeature = Features ["GVSPBurstSize"];
                return m_GVSPBurstSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPBurstSizeFeature = null;

        public GVSPDriverEnum GVSPDriver
        {
            get { return (GVSPDriverEnum) GVSPDriverFeature.EnumIntValue; }
            set { GVSPDriverFeature.EnumIntValue = (int) value; }
        }
        public AVT.VmbAPINET.Feature GVSPDriverFeature
        {
            get
            {
                if (m_GVSPDriverFeature == null)
                    m_GVSPDriverFeature = Features ["GVSPDriver"];
                return m_GVSPDriverFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPDriverFeature = null;

        public long GVSPHostReceiveBuffers
        {
            get { return GVSPHostReceiveBuffersFeature.IntValue; }
            set { GVSPHostReceiveBuffersFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVSPHostReceiveBuffersFeature
        {
            get
            {
                if (m_GVSPHostReceiveBuffersFeature == null)
                    m_GVSPHostReceiveBuffersFeature = Features ["GVSPHostReceiveBuffers"];
                return m_GVSPHostReceiveBuffersFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPHostReceiveBuffersFeature = null;

        public long GVSPMaxLookBack
        {
            get { return GVSPMaxLookBackFeature.IntValue; }
            set { GVSPMaxLookBackFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVSPMaxLookBackFeature
        {
            get
            {
                if (m_GVSPMaxLookBackFeature == null)
                    m_GVSPMaxLookBackFeature = Features ["GVSPMaxLookBack"];
                return m_GVSPMaxLookBackFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPMaxLookBackFeature = null;

        public long GVSPMaxRequests
        {
            get { return GVSPMaxRequestsFeature.IntValue; }
            set { GVSPMaxRequestsFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVSPMaxRequestsFeature
        {
            get
            {
                if (m_GVSPMaxRequestsFeature == null)
                    m_GVSPMaxRequestsFeature = Features ["GVSPMaxRequests"];
                return m_GVSPMaxRequestsFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPMaxRequestsFeature = null;

        public long GVSPMaxWaitSize
        {
            get { return GVSPMaxWaitSizeFeature.IntValue; }
            set { GVSPMaxWaitSizeFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVSPMaxWaitSizeFeature
        {
            get
            {
                if (m_GVSPMaxWaitSizeFeature == null)
                    m_GVSPMaxWaitSizeFeature = Features ["GVSPMaxWaitSize"];
                return m_GVSPMaxWaitSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPMaxWaitSizeFeature = null;

        public long GVSPMissingSize
        {
            get { return GVSPMissingSizeFeature.IntValue; }
            set { GVSPMissingSizeFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVSPMissingSizeFeature
        {
            get
            {
                if (m_GVSPMissingSizeFeature == null)
                    m_GVSPMissingSizeFeature = Features ["GVSPMissingSize"];
                return m_GVSPMissingSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPMissingSizeFeature = null;

        public long GVSPPacketSize
        {
            get { return GVSPPacketSizeFeature.IntValue; }
            set { GVSPPacketSizeFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVSPPacketSizeFeature
        {
            get
            {
                if (m_GVSPPacketSizeFeature == null)
                    m_GVSPPacketSizeFeature = Features ["GVSPPacketSize"];
                return m_GVSPPacketSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPPacketSizeFeature = null;

        public long GVSPTiltingSize
        {
            get { return GVSPTiltingSizeFeature.IntValue; }
            set { GVSPTiltingSizeFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVSPTiltingSizeFeature
        {
            get
            {
                if (m_GVSPTiltingSizeFeature == null)
                    m_GVSPTiltingSizeFeature = Features ["GVSPTiltingSize"];
                return m_GVSPTiltingSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPTiltingSizeFeature = null;

        public long GVSPTimeout
        {
            get { return GVSPTimeoutFeature.IntValue; }
            set { GVSPTimeoutFeature.IntValue = value; }
        }
        public AVT.VmbAPINET.Feature GVSPTimeoutFeature
        {
            get
            {
                if (m_GVSPTimeoutFeature == null)
                    m_GVSPTimeoutFeature = Features ["GVSPTimeout"];
                return m_GVSPTimeoutFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPTimeoutFeature = null;

        #endregion

        #region Category /Stream/Statistics

        public long StatFrameDelivered
        {
            get { return StatFrameDeliveredFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StatFrameDeliveredFeature
        {
            get
            {
                if (m_StatFrameDeliveredFeature == null)
                    m_StatFrameDeliveredFeature = Features ["StatFrameDelivered"];
                return m_StatFrameDeliveredFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatFrameDeliveredFeature = null;

        public long StatFrameDropped
        {
            get { return StatFrameDroppedFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StatFrameDroppedFeature
        {
            get
            {
                if (m_StatFrameDroppedFeature == null)
                    m_StatFrameDroppedFeature = Features ["StatFrameDropped"];
                return m_StatFrameDroppedFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatFrameDroppedFeature = null;

        public double StatFrameRate
        {
            get { return StatFrameRateFeature.FloatValue; }
        }
        public AVT.VmbAPINET.Feature StatFrameRateFeature
        {
            get
            {
                if (m_StatFrameRateFeature == null)
                    m_StatFrameRateFeature = Features ["StatFrameRate"];
                return m_StatFrameRateFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatFrameRateFeature = null;

        public long StatFrameRescued
        {
            get { return StatFrameRescuedFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StatFrameRescuedFeature
        {
            get
            {
                if (m_StatFrameRescuedFeature == null)
                    m_StatFrameRescuedFeature = Features ["StatFrameRescued"];
                return m_StatFrameRescuedFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatFrameRescuedFeature = null;

        public long StatFrameShoved
        {
            get { return StatFrameShovedFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StatFrameShovedFeature
        {
            get
            {
                if (m_StatFrameShovedFeature == null)
                    m_StatFrameShovedFeature = Features ["StatFrameShoved"];
                return m_StatFrameShovedFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatFrameShovedFeature = null;

        public long StatFrameUnderrun
        {
            get { return StatFrameUnderrunFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StatFrameUnderrunFeature
        {
            get
            {
                if (m_StatFrameUnderrunFeature == null)
                    m_StatFrameUnderrunFeature = Features ["StatFrameUnderrun"];
                return m_StatFrameUnderrunFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatFrameUnderrunFeature = null;

        public double StatLocalRate
        {
            get { return StatLocalRateFeature.FloatValue; }
        }
        public AVT.VmbAPINET.Feature StatLocalRateFeature
        {
            get
            {
                if (m_StatLocalRateFeature == null)
                    m_StatLocalRateFeature = Features ["StatLocalRate"];
                return m_StatLocalRateFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatLocalRateFeature = null;

        public long StatPacketErrors
        {
            get { return StatPacketErrorsFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StatPacketErrorsFeature
        {
            get
            {
                if (m_StatPacketErrorsFeature == null)
                    m_StatPacketErrorsFeature = Features ["StatPacketErrors"];
                return m_StatPacketErrorsFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatPacketErrorsFeature = null;

        public long StatPacketMissed
        {
            get { return StatPacketMissedFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StatPacketMissedFeature
        {
            get
            {
                if (m_StatPacketMissedFeature == null)
                    m_StatPacketMissedFeature = Features ["StatPacketMissed"];
                return m_StatPacketMissedFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatPacketMissedFeature = null;

        public long StatPacketReceived
        {
            get { return StatPacketReceivedFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StatPacketReceivedFeature
        {
            get
            {
                if (m_StatPacketReceivedFeature == null)
                    m_StatPacketReceivedFeature = Features ["StatPacketReceived"];
                return m_StatPacketReceivedFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatPacketReceivedFeature = null;

        public long StatPacketRequested
        {
            get { return StatPacketRequestedFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StatPacketRequestedFeature
        {
            get
            {
                if (m_StatPacketRequestedFeature == null)
                    m_StatPacketRequestedFeature = Features ["StatPacketRequested"];
                return m_StatPacketRequestedFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatPacketRequestedFeature = null;

        public long StatPacketResent
        {
            get { return StatPacketResentFeature.IntValue; }
        }
        public AVT.VmbAPINET.Feature StatPacketResentFeature
        {
            get
            {
                if (m_StatPacketResentFeature == null)
                    m_StatPacketResentFeature = Features ["StatPacketResent"];
                return m_StatPacketResentFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatPacketResentFeature = null;

        public double StatTimeElapsed
        {
            get { return StatTimeElapsedFeature.FloatValue; }
        }
        public AVT.VmbAPINET.Feature StatTimeElapsedFeature
        {
            get
            {
                if (m_StatTimeElapsedFeature == null)
                    m_StatTimeElapsedFeature = Features ["StatTimeElapsed"];
                return m_StatTimeElapsedFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StatTimeElapsedFeature = null;

        #endregion

        #region Category /StreamInformation

        public string StreamID
        {
            get { return StreamIDFeature.StringValue; }
        }
        public AVT.VmbAPINET.Feature StreamIDFeature
        {
            get
            {
                if (m_StreamIDFeature == null)
                    m_StreamIDFeature = Features ["StreamID"];
                return m_StreamIDFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamIDFeature = null;

        public StreamTypeEnum StreamType
        {
            get { return (StreamTypeEnum) StreamTypeFeature.EnumIntValue; }
        }
        public AVT.VmbAPINET.Feature StreamTypeFeature
        {
            get
            {
                if (m_StreamTypeFeature == null)
                    m_StreamTypeFeature = Features ["StreamType"];
                return m_StreamTypeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_StreamTypeFeature = null;

        #endregion

        #endregion

        #region Public methods.

        #region Category /Acquisition

        public void AcquisitionAbort ()
        {
            AcquisitionAbortFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature AcquisitionAbortFeature
        {
            get
            {
                if (m_AcquisitionAbortFeature == null)
                    m_AcquisitionAbortFeature = Features ["AcquisitionAbort"];
                return m_AcquisitionAbortFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionAbortFeature = null;

        public void AcquisitionStart ()
        {
            AcquisitionStartFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature AcquisitionStartFeature
        {
            get
            {
                if (m_AcquisitionStartFeature == null)
                    m_AcquisitionStartFeature = Features ["AcquisitionStart"];
                return m_AcquisitionStartFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionStartFeature = null;

        public void AcquisitionStop ()
        {
            AcquisitionStopFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature AcquisitionStopFeature
        {
            get
            {
                if (m_AcquisitionStopFeature == null)
                    m_AcquisitionStopFeature = Features ["AcquisitionStop"];
                return m_AcquisitionStopFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_AcquisitionStopFeature = null;

        #endregion

        #region Category /Acquisition/Trigger

        public void TriggerSoftware ()
        {
            TriggerSoftwareFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature TriggerSoftwareFeature
        {
            get
            {
                if (m_TriggerSoftwareFeature == null)
                    m_TriggerSoftwareFeature = Features ["TriggerSoftware"];
                return m_TriggerSoftwareFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_TriggerSoftwareFeature = null;

        #endregion

        #region Category /Controls/LUTControl

        public void LUTLoadAll ()
        {
            LUTLoadAllFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature LUTLoadAllFeature
        {
            get
            {
                if (m_LUTLoadAllFeature == null)
                    m_LUTLoadAllFeature = Features ["LUTLoadAll"];
                return m_LUTLoadAllFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTLoadAllFeature = null;

        public void LUTSaveAll ()
        {
            LUTSaveAllFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature LUTSaveAllFeature
        {
            get
            {
                if (m_LUTSaveAllFeature == null)
                    m_LUTSaveAllFeature = Features ["LUTSaveAll"];
                return m_LUTSaveAllFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_LUTSaveAllFeature = null;

        #endregion

        #region Category /GigE/Timestamp

        public void GevTimestampControlLatch ()
        {
            GevTimestampControlLatchFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature GevTimestampControlLatchFeature
        {
            get
            {
                if (m_GevTimestampControlLatchFeature == null)
                    m_GevTimestampControlLatchFeature = Features ["GevTimestampControlLatch"];
                return m_GevTimestampControlLatchFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevTimestampControlLatchFeature = null;

        public void GevTimestampControlReset ()
        {
            GevTimestampControlResetFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature GevTimestampControlResetFeature
        {
            get
            {
                if (m_GevTimestampControlResetFeature == null)
                    m_GevTimestampControlResetFeature = Features ["GevTimestampControlReset"];
                return m_GevTimestampControlResetFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GevTimestampControlResetFeature = null;

        #endregion

        #region Category /SavedUserSets

        public void UserSetLoad ()
        {
            UserSetLoadFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature UserSetLoadFeature
        {
            get
            {
                if (m_UserSetLoadFeature == null)
                    m_UserSetLoadFeature = Features ["UserSetLoad"];
                return m_UserSetLoadFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_UserSetLoadFeature = null;

        public void UserSetSave ()
        {
            UserSetSaveFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature UserSetSaveFeature
        {
            get
            {
                if (m_UserSetSaveFeature == null)
                    m_UserSetSaveFeature = Features ["UserSetSave"];
                return m_UserSetSaveFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_UserSetSaveFeature = null;

        #endregion

        #region Category /Stream/Settings

        public void GVSPAdjustPacketSize ()
        {
            GVSPAdjustPacketSizeFeature.RunCommand ();
        }
        public AVT.VmbAPINET.Feature GVSPAdjustPacketSizeFeature
        {
            get
            {
                if (m_GVSPAdjustPacketSizeFeature == null)
                    m_GVSPAdjustPacketSizeFeature = Features ["GVSPAdjustPacketSize"];
                return m_GVSPAdjustPacketSizeFeature;
            }
        }
        private AVT.VmbAPINET.Feature m_GVSPAdjustPacketSizeFeature = null;

        #endregion

        #endregion

        #region Enum declarations.

        public enum AcquisitionModeEnum
        {
            Continuous = 1,
            SingleFrame = 2,
            MultiFrame = 3,
            Recorder = 4
        }

        public enum BandwidthControlModeEnum
        {
            StreamBytesPerSecond = 0,
            SCPD = 1,
            Both = 2
        }

        public enum BlackLevelSelectorEnum
        {
            All = 0
        }

        public enum DeviceScanTypeEnum
        {
            Areascan = 0
        }

        public enum DeviceTemperatureSelectorEnum
        {
            Sensor = 0,
            Main = 1,
            Power = 2
        }

        public enum EventNotificationEnum
        {
            Off = 0,
            On = 1
        }

        public enum EventSelectorEnum
        {
            AcquisitionStart = 40000,
            AcquisitionEnd = 40001,
            FrameTrigger = 40002,
            ExposureEnd = 40003,
            AcquisitionRecordTrigger = 40004,
            Line1RisingEdge = 40010,
            Line1FallingEdge = 40011,
            Line2RisingEdge = 40012,
            Line2FallingEdge = 40013,
            Line3RisingEdge = 40014,
            Line3FallingEdge = 40015,
            Line4RisingEdge = 40016,
            Line4FallingEdge = 40017,
            FrameTriggerReady = 40018,
            ExposureStart = 40019
        }

        public enum ExposureAutoEnum
        {
            Off = 1,
            Continuous = 2,
            Once = 3
        }

        public enum ExposureAutoAlgEnum
        {
            Mean = 0,
            FitRange = 1
        }

        public enum ExposureModeEnum
        {
            Timed = 0,
            TriggerWidth = 1
        }

        public enum GVSPDriverEnum
        {
            Socket = 0,
            Filter = 1
        }

        public enum GainAutoEnum
        {
            Off = 1,
            Continuous = 2,
            Once = 3
        }

        public enum GainSelectorEnum
        {
            All = 0
        }

        public enum GevIPConfigurationModeEnum
        {
            LLA = 4,
            Persistent = 5,
            DHCP = 6
        }

        public enum LUTModeEnum
        {
            Luminance = 0,
            Red = 1,
            Green = 2,
            Blue = 3
        }

        public enum LUTSelectorEnum
        {
            LUT1 = 0,
            LUT2 = 1,
            LUT3 = 2,
            LUT4 = 3,
            LUT5 = 4
        }

        public enum PixelFormatEnum
        {
            Mono8 = 17301505,
            BayerGR8 = 17301512,
            BayerRG8 = 17301513,
            BayerGB8 = 17301514,
            BayerBG8 = 17301515,
            Mono12Packed = 17563654,
            BayerGR12Packed = 17563690,
            BayerRG12Packed = 17563691,
            BayerGB12Packed = 17563692,
            Mono10 = 17825795,
            Mono12 = 17825797,
            BayerBG10 = 17825807,
            BayerGR12 = 17825808,
            BayerRG12 = 17825809,
            BayerGB12 = 17825810,
            Mono14 = 17825829,
            YUV411Packed = 34340894,
            YUV422Packed = 34603039,
            RGB8Packed = 35127316,
            BGR8Packed = 35127317,
            YUV444Packed = 35127328,
            RGBA8Packed = 35651606,
            BGRA8Packed = 35651607,
            RGB10Packed = 36700184,
            RGB12Packed = 36700186
        }

        public enum SensorTypeEnum
        {
            Mono = 0,
            Bayer = 1
        }

        public enum StreamBufferHandlingModeEnum
        {
            Default = 0
        }

        public enum StreamHoldEnableEnum
        {
            Off = 0,
            On = 1
        }

        public enum StreamTypeEnum
        {
            GEV = 2
        }

        public enum StrobeDurationModeEnum
        {
            Source = 0,
            Controlled = 1
        }

        public enum StrobeSourceEnum
        {
            AcquisitionTriggerReady = 1,
            FrameTriggerReady = 2,
            FrameTrigger = 3,
            Exposing = 4,
            FrameReadout = 5,
            Acquiring = 7,
            LineIn1 = 8,
            LineIn2 = 9
        }

        public enum SyncInSelectorEnum
        {
            SyncIn1 = 0,
            SyncIn2 = 1,
            SyncIn3 = 2,
            SyncIn4 = 3
        }

        public enum SyncOutPolarityEnum
        {
            Normal = 0,
            Invert = 1
        }

        public enum SyncOutSelectorEnum
        {
            SyncOut1 = 0,
            SyncOut2 = 1,
            SyncOut3 = 2,
            SyncOut4 = 3
        }

        public enum SyncOutSourceEnum
        {
            GPO = 0,
            AcquisitionTriggerReady = 1,
            FrameTriggerReady = 2,
            Exposing = 4,
            FrameReadout = 5,
            Imaging = 6,
            Acquiring = 7,
            LineIn1 = 8,
            LineIn2 = 9,
            Strobe1 = 12
        }

        public enum TriggerActivationEnum
        {
            RisingEdge = 0,
            FallingEdge = 1,
            AnyEdge = 2,
            LevelHigh = 3,
            LevelLow = 4
        }

        public enum TriggerModeEnum
        {
            Off = 0,
            On = 1
        }

        public enum TriggerOverlapEnum
        {
            Off = 0,
            ReadOut = 1,
            PreviousFrame = 2
        }

        public enum TriggerSelectorEnum
        {
            FrameStart = 0,
            AcquisitionStart = 3,
            AcquisitionEnd = 4,
            AcquisitionRecord = 6
        }

        public enum TriggerSourceEnum
        {
            Freerun = 0,
            Line1 = 1,
            Line2 = 2,
            Line3 = 3,
            Line4 = 4,
            FixedRate = 5,
            Software = 6
        }

        public enum UserSetDefaultSelectorEnum
        {
            Default = 0,
            UserSet1 = 1,
            UserSet2 = 2,
            UserSet3 = 3,
            UserSet4 = 4,
            UserSet5 = 5
        }

        public enum UserSetSelectorEnum
        {
            Default = 0,
            UserSet1 = 1,
            UserSet2 = 2,
            UserSet3 = 3,
            UserSet4 = 4,
            UserSet5 = 5
        }

        #endregion
    }
}
